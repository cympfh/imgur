#!/bin/bash

# env `CLIENT_ID` and `CLIENT_SECRET`
if [ -f ~/.imgur/app.sh ]; then
    source ~/.imgur/app.sh
else
    cat << EOM
Error: ~/.imgur/app.sh not found

Please put your CLIENT_ID and CLIENT_SECRET in ~/.imgur/app.sh
like

CLIENT_ID=xxxxx
CLIENT_SECRET=xxxxyyyyyyyzzzzzzzzz
EOM
    exit 0
fi

BASE_URL=https://api.imgur.com

usage() {
    cat <<EOM
NAME
    imgur -- imgur.com CLI

SIYNOPSIS

    imgur auth

        make authorization

    imgur album create <title>

        make new album
        The album info (title, id, hashtag) will be stored in ~/.imgur/albums.jsonl

    imgur album ls

        list up your albums, which are stored in ~/.imgur/albums.jsonl

    imgur album ls <album-name>

        list up all images in the album

    imgur up [--title <title>] [-d <description>] [-A <album-name>] <file or URL>

        upload an image [with the title and the description]
EOM
}

## helpers

browser-open() {
    if which firefox >/dev/null; then
        firefox "$1"
    else
        open -a 'Firefox' "$1"
    fi
}

error-handling() {
    jq -r 'if .success then .data.link else .data.error end'
}

albumname_to_id() {
    jq -r "select(.title == \"$1\") | .id" ~/.imgur/albums.jsonl |
    head -1
}

albumname_to_deletehash() {
    jq -r "select(.title == \"$1\") | .deletehash" ~/.imgur/albums.jsonl |
    head -1
}

## commands

auth() {
    URL="$BASE_URL/oauth2/authorize?client_id=${CLIENT_ID}&response_type=pin"
    browser-open $URL
    echo -n "PIN> "
    read PIN
    curl -XPOST \
        -F "client_id=$CLIENT_ID" \
        -F "client_secret=$CLIENT_SECRET" \
        -F "grant_type=pin" \
        -F "pin=$PIN" \
        "$BASE_URL/oauth2/token" > ~/.imgur/auth.json
}

image-upload() {
    URL="$BASE_URL/3/image"
    OPTS=
    FILE=
    URL_MODE=
    while [ ! -z "$1" ]; do
        case "$1" in
            -t | --title | -title )
                OPTS="$OPTS -F \"title=$2\""
                shift 2
                ;;
            -d | -D | --description )
                OPTS="$OPTS -F \"description=$2\""
                shift 2
                ;;
            -A | --album )
                DELETEHASH=$(albumname_to_deletehash "$2")
                OPTS="$OPTS -F \"album=${DELETEHASH}\""
                shift
                ;;
            http://* | https://* )
                URL_MODE=on
                FILE=$1
                shift
                ;;
            * )
                URL_MODE=
                FILE=$1
                shift
                ;;
        esac
    done

    if [ -z "$FILE" ]; then
        usage
        exit 0
    fi

    TOKEN_HEADER="Authorization: Bearer $(jq -r .access_token ~/.imgur/auth.json)"

    if [ ! -z "$URL_MODE" ]; then
        echo "curl -s -H \"$TOKEN_HEADER\" -XPOST $OPTS -F type=url -F \"image=$FILE\" $URL" | sh | error-handling
    else
        echo "curl -s -H \"$TOKEN_HEADER\" -XPOST $OPTS -F image=@$FILE $URL" | sh | error-handling
    fi
}

album-create() {
    URL="$BASE_URL/3/album"
    TOKEN_HEADER="Authorization: Bearer $(jq -r .access_token ~/.imgur/auth.json)"
    curl -s -H "$TOKEN_HEADER" -F "title=$1" "$URL" |
    jq -cM ".data | {title: \"$1\", id, deletehash}" |
    tee -a ~/.imgur/albums.jsonl
}

album-ls() {
    printf "TITLE\tID\tDELETEHASH\n"
    cat ~/.imgur/albums.jsonl | jq -r '"\(.title)\t\(.id)\t\(.deletehash)"'
}

album-image-ls() {
    ID=$(albumname_to_id "$1")
    URL="$BASE_URL/3/album/${ID}/images"
    TOKEN_HEADER="Authorization: Bearer $(jq -r .access_token ~/.imgur/auth.json)"
    curl -s -H "$TOKEN_HEADER" "$URL" |
    jq '.data[] | {id, title, description, link, deletehash}'
}

case "$1" in
    auth )
        auth
        ;;
    album)
        case "$2" in
            create )
                album-create "$3"
                ;;
            ls )
                if [ $# -eq 2 ]; then
                    album-ls
                else
                    album-image-ls "$3"
                fi
                ;;
            * )
                usage
                ;;
        esac
        ;;
    up )
        shift
        image-upload "$@"
        ;;
    * )
        usage
        ;;
esac
